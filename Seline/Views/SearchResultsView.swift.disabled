//
//  SearchResultsView.swift
//  Seline
//
//  Created by Alishah Amin on 2025-08-24.
//

import SwiftUI
import Foundation

struct SearchResultsView: View {
    @Environment(\.dismiss) private var dismiss
    @ObservedObject var viewModel: ContentViewModel
    @State var searchQuery: String
    @State private var selectedEmail: Email?
    @State private var isShowingEmailDetail = false
    @State private var sortAscending = false
    @State private var recentSearches: [String] = []
    @State private var showingError = false
    @State private var isPerformingSearch = false
    @State private var searchType: SearchType = .email
    @State private var aiSummary: String = ""
    @State private var isPerformingAISearch = false
    @State private var showingFollowUpConversation = false
    @FocusState private var isSearchFieldFocused: Bool
    
    var body: some View {
        VStack(spacing: 0) {
            // Clean header with search
            searchHeader
            
            // Results content
            if isPerformingSearch || isPerformingAISearch || viewModel.isSearching {
                loadingView
            } else if searchQuery.isEmpty {
                recentSearchesView
            } else {
                searchResultsContent
            }
        }
        .linearBackground()
        .fullScreenCover(item: $selectedEmail) { email in
            NavigationView {
                GmailStyleEmailDetailView(email: email, viewModel: viewModel)
                    .navigationBarHidden(true)
            }
            .transition(.asymmetric(insertion: .move(edge: .trailing), removal: .move(edge: .trailing)))
        }
        .onChange(of: selectedEmail) { email in
            if email != nil {
                print("🔄 SearchResultsView: selectedEmail changed to \(email?.id ?? "nil")")
                isShowingEmailDetail = true
            } else {
                print("🔄 SearchResultsView: selectedEmail cleared")
                isShowingEmailDetail = false
            }
        }
        .sheet(isPresented: $showingFollowUpConversation) {
            FollowUpConversationView(
                initialContext: aiSummary,
                initialQuery: searchQuery,
                searchType: searchType
            )
        }
        .onAppear {
            loadRecentSearches()
            isSearchFieldFocused = true
            if !searchQuery.isEmpty {
                performSearch()
            }
        }
        .onChange(of: searchQuery) { newQuery in
            if newQuery.isEmpty {
                viewModel.searchResults = []
            } else {
                performSearchWithDelay(newQuery)
            }
        }
    }
    
    // MARK: - Search Header
    
    private var searchHeader: some View {
        VStack(spacing: 16) {
            // Top navigation
            HStack {
                Button(action: {
                    let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                    impactFeedback.impactOccurred()
                    dismiss()
                }) {
                    Image(systemName: "arrow.left")
                        .font(.title2)
                        .foregroundColor(DesignSystem.Colors.textPrimary)
                }
                
                Spacer()
                
                VStack(alignment: .trailing, spacing: 4) {
                    if searchType == .general && !aiSummary.isEmpty {
                        HStack(spacing: 6) {
                            Image(systemName: "brain.head.profile")
                                .font(.system(size: 12, weight: .medium))
                                .foregroundColor(DesignSystem.Colors.accent)
                            
                            Text("AI Response")
                                .font(.system(size: 12, weight: .medium, design: .rounded))
                                .foregroundColor(DesignSystem.Colors.accent)
                        }
                    } else if searchType == .email && !viewModel.searchResults.isEmpty {
                        HStack(spacing: 6) {
                            Image(systemName: "envelope")
                                .font(.system(size: 12, weight: .medium))
                                .foregroundColor(DesignSystem.Colors.textSecondary)
                            
                            Text("\(viewModel.searchResults.count) emails")
                                .font(.system(size: 12, weight: .medium, design: .rounded))
                                .foregroundColor(DesignSystem.Colors.textSecondary)
                        }
                    }
                }
            }
            .padding(.horizontal, 24)
            .padding(.top, 20)
            
            // Enhanced search bar
            HStack(spacing: 12) {
                Image(systemName: "magnifyingglass")
                    .font(.title3)
                    .foregroundColor(DesignSystem.Colors.textSecondary)
                
                TextField("Search emails...", text: $searchQuery)
                    .font(.system(size: 16, weight: .regular, design: .rounded))
                    .foregroundColor(DesignSystem.Colors.textPrimary)
                    .textFieldStyle(PlainTextFieldStyle())
                    .focused($isSearchFieldFocused)
                    .onSubmit {
                        if !searchQuery.isEmpty {
                            addToRecentSearches(searchQuery)
                            performSearch()
                        }
                    }
                
                if isPerformingSearch {
                    ProgressView()
                        .scaleEffect(0.8)
                        .tint(DesignSystem.Colors.accent)
                } else if !searchQuery.isEmpty {
                    Button(action: {
                        searchQuery = ""
                        isSearchFieldFocused = true
                    }) {
                        Image(systemName: "xmark.circle.fill")
                            .font(.title3)
                            .foregroundColor(DesignSystem.Colors.textSecondary)
                    }
                }
            }
            .padding(.horizontal, 20)
            .padding(.vertical, 16)
            .background(
                RoundedRectangle(cornerRadius: 16)
                    .fill(DesignSystem.Colors.surfaceSecondary)
                    .overlay(
                        RoundedRectangle(cornerRadius: 16)
                            .stroke(DesignSystem.Colors.border.opacity(0.3), lineWidth: 1)
                    )
            )
            .padding(.horizontal, 24)
            
            // Simple date sorting for email results
            if !searchQuery.isEmpty && searchType == .email && !viewModel.searchResults.isEmpty {
                simpleSortSection
            }
        }
        .padding(.bottom, 16)
    }
    
    // MARK: - Simple Sort Section
    
    private var simpleSortSection: some View {
        HStack(spacing: 12) {
            Text("Sort by date:")
                .font(.system(size: 14, weight: .medium, design: .rounded))
                .foregroundColor(DesignSystem.Colors.textSecondary)
            
            Button(action: {
                let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                impactFeedback.impactOccurred()
                sortAscending.toggle()
            }) {
                HStack(spacing: 6) {
                    Text(sortAscending ? "Oldest first" : "Newest first")
                        .font(.system(size: 14, weight: .medium, design: .rounded))
                    
                    Image(systemName: sortAscending ? "arrow.up" : "arrow.down")
                        .font(.system(size: 12, weight: .medium))
                }
                .foregroundColor(DesignSystem.Colors.accent)
                .padding(.horizontal, 12)
                .padding(.vertical, 6)
                .background(
                    RoundedRectangle(cornerRadius: 8)
                        .fill(DesignSystem.Colors.accent.opacity(0.1))
                )
            }
            
            Spacer()
        }
        .padding(.horizontal, 24)
    }
    
    // MARK: - Search Results Content
    
    private var searchResultsContent: some View {
        ScrollView {
            VStack(spacing: 0) {
                // AI Summary for general searches
                if searchType == .general && !aiSummary.isEmpty {
                    aiSummaryCard
                        .padding(.horizontal, 24)
                        .padding(.bottom, 20)
                }
                
                // AI Insights Card for email searches with AI results
                if searchType == .email,
                   let aiResult = viewModel.getCurrentSearchResult() {
                    aiInsightsCard(aiResult)
                        .padding(.horizontal, 24)
                        .padding(.bottom, 20)
                }
                
                // Email results for email searches
                if searchType == .email {
                    if viewModel.searchResults.isEmpty {
                        noResultsView
                    } else {
                        emailResultsList
                    }
                } else if searchType == .general {
                    // For general searches, show the summary (already shown above)
                    // Could add web results here in the future
                    if aiSummary.isEmpty {
                        noResultsView
                    }
                }
            }
        }
        .refreshable {
            await performRefreshSearch()
        }
    }
    
    // MARK: - Email Results List
    
    private var safeSearchResults: [Email] {
        let results = viewModel.searchResults
        ArrayBoundsLogger.logArrayAccess(arrayName: "searchResults", count: results.count)
        
        guard !results.isEmpty else { 
            print("🔍 SearchResultsView: No search results to display")
            return [] 
        }
        
        print("🔍 SearchResultsView: Processing \(results.count) search results")
        return results
    }
    
    private var emailResultsList: some View {
        LazyVStack(spacing: 0) {
            ForEach(Array(sortedSearchResults.enumerated()), id: \.element.id) { index, email in
                // Additional safety check
                if index < sortedSearchResults.count && sortedSearchResults.indices.contains(index) {
                SearchResultRow(email: email, query: searchQuery) {
                    print("🔍 SearchResultRow tapped for email: \(email.id)")
                    print("  - Subject: \(email.subject)")
                    print("  - Query: \(searchQuery)")
                    print("  - Current selectedEmail: \(selectedEmail?.id ?? "nil")")
                    print("  - Setting selectedEmail to trigger sheet")
                    
                    // Add haptic feedback
                    let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                    impactFeedback.impactOccurred()
                    
                    // Force update with animation to ensure state change is detected
                    withAnimation(.easeInOut(duration: 0.1)) {
                        selectedEmail = email
                    }
                    
                    print("  - selectedEmail set to: \(selectedEmail?.id ?? "nil")")
                    print("  - Sheet should appear now")
                    
                    // Debug: Force check after slight delay
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                        print("  - Debug check: selectedEmail is \(selectedEmail?.id ?? "nil"), isShowingEmailDetail: \(isShowingEmailDetail)")
                    }
                }
                
                    // Safe divider check
                    if index < sortedSearchResults.count - 1 {
                        Divider()
                            .padding(.leading, 80)
                    }
                }
            }
        }
    }
    
    // MARK: - AI Summary Card
    
    // MARK: - AI Insights Card
    
    private func aiInsightsCard(_ aiResult: IntelligentSearchResult) -> some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack(spacing: 12) {
                ZStack {
                    Circle()
                        .fill(DesignSystem.Colors.accent.opacity(0.1))
                        .frame(width: 32, height: 32)
                    
                    Image(systemName: "brain.head.profile")
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(DesignSystem.Colors.accent)
                }
                
                VStack(alignment: .leading, spacing: 4) {
                    Text("AI Search Insights")
                        .font(.system(size: 16, weight: .semibold, design: .rounded))
                        .foregroundColor(DesignSystem.Colors.textPrimary)
                    
                    Text("Analysis for '\(aiResult.query)'")
                        .font(.system(size: 12, weight: .medium, design: .rounded))
                        .foregroundColor(DesignSystem.Colors.textSecondary)
                }
                
                Spacer()
                
                followUpButton
            }
            
            // Query Analysis Section
            VStack(alignment: .leading, spacing: 8) {
                Text("Query Analysis")
                    .font(.system(size: 14, weight: .semibold, design: .rounded))
                    .foregroundColor(DesignSystem.Colors.textPrimary)
                
                Text(aiResult.queryAnalysis)
                    .font(.system(size: 14, weight: .regular, design: .rounded))
                    .foregroundColor(DesignSystem.Colors.textSecondary)
            }
            
            // Email Insights Section
            if !aiResult.emailInsights.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text("Email Insights")
                        .font(.system(size: 14, weight: .semibold, design: .rounded))
                        .foregroundColor(DesignSystem.Colors.textPrimary)
                    
                    Text(aiResult.emailInsights)
                        .font(.system(size: 14, weight: .regular, design: .rounded))
                        .foregroundColor(DesignSystem.Colors.textPrimary)
                }
            }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(DesignSystem.Colors.surfaceSecondary)
                .overlay(
                    RoundedRectangle(cornerRadius: 16)
                        .stroke(DesignSystem.Colors.accent.opacity(0.2), lineWidth: 1)
                )
        )
    }
    
    private var aiSummaryCard: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack(spacing: 12) {
                ZStack {
                    Circle()
                        .fill(summaryCardColor.opacity(0.1))
                        .frame(width: 32, height: 32)
                    
                    Image(systemName: summaryCardIcon)
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(summaryCardColor)
                }
                
                VStack(alignment: .leading, spacing: 4) {
                    Text(summaryCardTitle)
                        .font(.system(size: 16, weight: .semibold, design: .rounded))
                        .foregroundColor(DesignSystem.Colors.textPrimary)
                    
                    if searchType == .email && viewModel.searchResults.count >= 3 {
                        Text("From \(viewModel.searchResults.count) emails")
                            .font(.system(size: 12, weight: .medium, design: .rounded))
                            .foregroundColor(DesignSystem.Colors.textSecondary)
                    } else {
                        Text("AI Response")
                            .font(.system(size: 12, weight: .medium, design: .rounded))
                            .foregroundColor(DesignSystem.Colors.textSecondary)
                    }
                }
                
                Spacer()
                
                // Add follow-up button
                followUpButton
            }
            
            Text(aiSummary)
                .font(.system(size: 15, weight: .regular, design: .rounded))
                .foregroundColor(DesignSystem.Colors.textPrimary)
                .lineLimit(nil)
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(DesignSystem.Colors.surfaceSecondary)
                .overlay(
                    RoundedRectangle(cornerRadius: 16)
                        .stroke(summaryCardColor.opacity(0.2), lineWidth: 1)
                )
        )
    }
    
    private var summaryCardIcon: String {
        switch searchType {
        case .email:
            return "envelope.badge.fill"
        case .general:
            return "brain.head.profile"
        }
    }
    
    private var summaryCardTitle: String {
        switch searchType {
        case .email:
            return "Email Summary"
        case .general:
            return "AI Response"
        }
    }
    
    private var summaryCardColor: Color {
        switch searchType {
        case .email:
            return .blue
        case .general:
            return DesignSystem.Colors.accent
        }
    }
    
    private var followUpButton: some View {
        Button(action: {
            print("Follow-up tapped for: \(searchType.displayName)")
            showingFollowUpConversation = true
        }) {
            HStack(spacing: 6) {
                Image(systemName: "bubble.left")
                    .font(.system(size: 12, weight: .medium))
                Text("Follow-up")
                    .font(.system(size: 12, weight: .medium, design: .rounded))
            }
            .foregroundColor(summaryCardColor)
            .padding(.horizontal, 10)
            .padding(.vertical, 6)
            .background(
                RoundedRectangle(cornerRadius: 8)
                    .fill(summaryCardColor.opacity(0.1))
                    .overlay(
                        RoundedRectangle(cornerRadius: 8)
                            .stroke(summaryCardColor.opacity(0.3), lineWidth: 1)
                    )
            )
        }
    }
    
    // MARK: - Recent Searches
    
    private var recentSearchesView: some View {
        ScrollView {
            VStack(spacing: 24) {
                if !recentSearches.isEmpty {
                    VStack(spacing: 16) {
                        HStack {
                            Text("Recent Searches")
                                .font(.system(size: 18, weight: .semibold, design: .rounded))
                                .foregroundColor(DesignSystem.Colors.textPrimary)
                            
                            Spacer()
                            
                            Button("Clear") {
                                clearRecentSearches()
                            }
                            .font(.system(size: 14, weight: .medium, design: .rounded))
                            .foregroundColor(DesignSystem.Colors.accent)
                        }
                        
                        VStack(spacing: 0) {
                            ForEach(Array(recentSearches.enumerated()), id: \.offset) { index, search in
                                Button(action: {
                                    searchQuery = search
                                    isSearchFieldFocused = false
                                }) {
                                    HStack(spacing: 16) {
                                        Image(systemName: "clock")
                                            .font(.system(size: 16))
                                            .foregroundColor(DesignSystem.Colors.textSecondary)
                                        
                                        Text(search)
                                            .font(.system(size: 16, weight: .regular, design: .rounded))
                                            .foregroundColor(DesignSystem.Colors.textPrimary)
                                        
                                        Spacer()
                                        
                                        Button(action: {
                                            removeFromRecentSearches(search)
                                        }) {
                                            Image(systemName: "xmark")
                                                .font(.system(size: 12))
                                                .foregroundColor(DesignSystem.Colors.textSecondary)
                                        }
                                    }
                                    .padding(.horizontal, 20)
                                    .padding(.vertical, 12)
                                }
                                .buttonStyle(PlainButtonStyle())
                                
                                if index < recentSearches.count - 1 {
                                    Divider()
                                        .padding(.leading, 52)
                                }
                            }
                        }
                        .background(
                            RoundedRectangle(cornerRadius: 16)
                                .fill(DesignSystem.Colors.surfaceSecondary)
                                .overlay(
                                    RoundedRectangle(cornerRadius: 16)
                                        .stroke(DesignSystem.Colors.border.opacity(0.2), lineWidth: 1)
                                )
                        )
                    }
                }
                
                // Search suggestions
                searchSuggestions
            }
            .padding(.horizontal, 24)
            .padding(.top, 24)
        }
    }
    
    // MARK: - Search Suggestions
    
    private var searchSuggestions: some View {
        VStack(spacing: 16) {
            HStack {
                Text("Search Suggestions")
                    .font(.system(size: 18, weight: .semibold, design: .rounded))
                    .foregroundColor(DesignSystem.Colors.textPrimary)
                
                Spacer()
            }
            
            let suggestions = [
                // Email search examples
                "urgent", "meeting", "from:support", "has:attachment", "today", "unread",
                // General search examples
                "What is the weather?", "How to cook pasta?", "Latest news", "Define AI"
            ]
            
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: 12) {
                ForEach(suggestions.prefix(8), id: \.self) { suggestion in
                    Button(action: {
                        searchQuery = suggestion
                        isSearchFieldFocused = false
                    }) {
                        Text(suggestion)
                            .font(.system(size: 14, weight: .medium, design: .rounded))
                            .foregroundColor(DesignSystem.Colors.textSecondary)
                            .padding(.horizontal, 16)
                            .padding(.vertical, 10)
                            .frame(maxWidth: .infinity)
                            .background(
                                RoundedRectangle(cornerRadius: 12)
                                    .fill(DesignSystem.Colors.surfaceSecondary)
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 12)
                                            .stroke(DesignSystem.Colors.border.opacity(0.2), lineWidth: 1)
                                    )
                            )
                    }
                }
            }
        }
    }
    
    // MARK: - Loading View
    
    private var loadingView: some View {
        VStack(spacing: 20) {
            ProgressView()
                .scaleEffect(1.2)
                .tint(DesignSystem.Colors.accent)
            
            Text(loadingMessage)
                .font(.system(size: 16, weight: .medium, design: .rounded))
                .foregroundColor(DesignSystem.Colors.textSecondary)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .padding(.top, 100)
    }
    
    private var loadingMessage: String {
        if isPerformingAISearch {
            return "Getting AI response..."
        } else if viewModel.isSearching {
            return "Searching emails and generating AI insights..."
        } else {
            return "Searching emails..."
        }
    }
    
    // MARK: - No Results View
    
    private var noResultsView: some View {
        VStack(spacing: 20) {
            Image(systemName: "magnifyingglass")
                .font(.system(size: 60))
                .foregroundColor(DesignSystem.Colors.textSecondary.opacity(0.5))
            
            VStack(spacing: 8) {
                Text("No results found")
                    .font(.system(size: 20, weight: .semibold, design: .rounded))
                    .foregroundColor(DesignSystem.Colors.textPrimary)
                
                Text("Try different keywords or check your spelling")
                    .font(.system(size: 15, weight: .regular, design: .rounded))
                    .foregroundColor(DesignSystem.Colors.textSecondary)
                    .multilineTextAlignment(.center)
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .padding(.top, 100)
        .padding(.horizontal, 24)
    }
    
    // MARK: - Helper Functions
    
    private var sortedSearchResults: [Email] {
        let results = safeSearchResults
        guard !results.isEmpty else { return [] }
        
        let sortedResults = results.safeSortedByDate(ascending: sortAscending)
        ArrayBoundsLogger.logArrayOperation(operation: "SortSearch", arrayName: "searchResults", originalCount: results.count, resultCount: sortedResults.count)
        
        return sortedResults
    }
    
    private func performSearch() {
        guard !searchQuery.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
            return
        }
        
        // Classify the search query
        searchType = classifyQuery(searchQuery)
        
        if searchType == .email {
            performEmailSearch()
        } else {
            performAISearch()
        }
    }
    
    private func performEmailSearch() {
        isPerformingSearch = true
        aiSummary = "" // Clear any previous AI summary
        
        Task {
            await viewModel.performSearch(query: searchQuery)
            
            await MainActor.run {
                isPerformingSearch = false
                
                // AI insights are now automatically generated in ContentViewModel
                // No need to call generateEmailSummary() here
            }
        }
    }
    
    private func performAISearch() {
        isPerformingAISearch = true
        aiSummary = ""
        
        Task {
            do {
                let summary = try await AISearchService.shared.performGeneralSearch(query: searchQuery)
                
                await MainActor.run {
                    aiSummary = summary
                    isPerformingAISearch = false
                }
            } catch {
                await MainActor.run {
                    aiSummary = "Unable to get AI response: \(error.localizedDescription)"
                    isPerformingAISearch = false
                }
            }
        }
    }
    
    private func generateEmailSummary() {
        guard !isPerformingAISearch && searchType == .email && viewModel.searchResults.count >= 3 else {
            return
        }
        
        isPerformingAISearch = true
        
        Task {
            do {
                let summary = try await AISearchService.shared.generateEmailSummary(
                    for: Array(viewModel.searchResults.prefix(10)),
                    query: searchQuery
                )
                
                await MainActor.run {
                    if !summary.isEmpty {
                        aiSummary = summary
                    }
                    isPerformingAISearch = false
                }
            } catch {
                print("Failed to generate email summary: \(error.localizedDescription)")
                await MainActor.run {
                    isPerformingAISearch = false
                }
            }
        }
    }
    
    private func classifyQuery(_ query: String) -> SearchType {
        let lowercaseQuery = query.lowercased()
        
        // Email-specific keywords
        let emailKeywords = [
            "email", "message", "from:", "to:", "subject:", "attachment",
            "unread", "inbox", "sent", "draft", "important", "spam"
        ]
        
        // Check if query contains email-specific terms
        for keyword in emailKeywords {
            if lowercaseQuery.contains(keyword) {
                return .email
            }
        }
        
        // Check if query is asking for email-related information
        let emailPatterns = [
            "show.*email", "find.*message", "search.*mail",
            "latest.*email", "recent.*message"
        ]
        
        for pattern in emailPatterns {
            if lowercaseQuery.range(of: pattern, options: .regularExpression) != nil {
                return .email
            }
        }
        
        // Default to general search for other queries
        return .general
    }
    
    private func performSearchWithDelay(_ query: String) {
        // Debounce search
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            if searchQuery == query { // Only search if query hasn't changed
                performSearch()
            }
        }
    }
    
    private func performRefreshSearch() async {
        if !searchQuery.isEmpty {
            if searchType == .email {
                await viewModel.performSearch(query: searchQuery)
            } else {
                // Re-perform AI search
                performAISearch()
            }
        }
    }
    
    private func sortResults() {
        // Results are already sorted in sortedSearchResults computed property
    }
    
    // MARK: - Recent Searches Management
    
    private func loadRecentSearches() {
        recentSearches = UserDefaults.standard.stringArray(forKey: "RecentSearches") ?? []
    }
    
    private func addToRecentSearches(_ search: String) {
        let trimmed = search.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !trimmed.isEmpty else { return }
        
        // Remove if already exists
        recentSearches.removeAll { $0 == trimmed }
        
        // Add to beginning
        recentSearches.insert(trimmed, at: 0)
        
        // Keep only latest 10
        if recentSearches.count > 10 {
            recentSearches = Array(recentSearches.prefix(10))
        }
        
        UserDefaults.standard.set(recentSearches, forKey: "RecentSearches")
    }
    
    private func removeFromRecentSearches(_ search: String) {
        recentSearches.removeAll { $0 == search }
        UserDefaults.standard.set(recentSearches, forKey: "RecentSearches")
    }
    
    private func clearRecentSearches() {
        recentSearches.removeAll()
        UserDefaults.standard.removeObject(forKey: "RecentSearches")
    }
}

// MARK: - Search Result Row

struct SearchResultRow: View {
    let email: Email
    let query: String
    let onTap: () -> Void
    
    @State private var isPressed = false
    
    var body: some View {
        Button(action: onTap) {
            HStack(spacing: 16) {
                // Sender avatar
                ZStack {
                    Circle()
                        .fill(DesignSystem.Colors.accent.opacity(0.1))
                        .frame(width: 50, height: 50)
                        .overlay(
                            Circle()
                                .stroke(DesignSystem.Colors.accent.opacity(0.3), lineWidth: 2)
                        )
                    
                    if !email.isRead {
                        Circle()
                            .fill(DesignSystem.Colors.accent)
                            .frame(width: 12, height: 12)
                            .offset(x: 15, y: -15)
                    }
                    
                    Text(String(email.sender.displayName.prefix(1).uppercased()))
                        .font(.system(size: 16, weight: .semibold, design: .rounded))
                        .foregroundColor(DesignSystem.Colors.accent)
                }
                
                // Email content
                VStack(alignment: .leading, spacing: 6) {
                    HStack {
                        Text(email.sender.displayName)
                            .font(.system(size: email.isRead ? 15 : 16, weight: email.isRead ? .regular : .semibold, design: .rounded))
                            .foregroundColor(DesignSystem.Colors.textPrimary)
                            .lineLimit(1)
                        
                        Spacer()
                        
                        Text(RelativeDateTimeFormatter().localizedString(for: email.date, relativeTo: Date()))
                            .font(.system(size: 12, weight: .regular, design: .rounded))
                            .foregroundColor(DesignSystem.Colors.textSecondary)
                    }
                    
                    Text(highlightedSubject)
                        .font(.system(size: email.isRead ? 14 : 15, weight: email.isRead ? .regular : .medium, design: .rounded))
                        .foregroundColor(email.isRead ? DesignSystem.Colors.textSecondary : DesignSystem.Colors.textPrimary)
                        .lineLimit(1)
                    
                    Text(highlightedBody)
                        .font(.system(size: 13, weight: .regular, design: .rounded))
                        .foregroundColor(DesignSystem.Colors.textSecondary)
                        .lineLimit(2)
                    
                    // Metadata
                    HStack(spacing: 12) {
                        if !email.attachments.isEmpty {
                            Label("\(email.attachments.count)", systemImage: "paperclip")
                                .font(.system(size: 11, weight: .regular, design: .rounded))
                                .foregroundColor(DesignSystem.Colors.textSecondary)
                        }
                        
                        if email.isImportant {
                            Image(systemName: "exclamationmark.circle.fill")
                                .font(.system(size: 11))
                                .foregroundColor(.red)
                        }
                        
                        Spacer()
                    }
                }
                
                Image(systemName: "chevron.right")
                    .font(.caption)
                    .foregroundColor(DesignSystem.Colors.textSecondary)
                    .scaleEffect(isPressed ? 1.2 : 1.0)
                    .animation(.easeInOut(duration: 0.1), value: isPressed)
            }
            .padding(.horizontal, 20)
            .padding(.vertical, 16)
            .background(DesignSystem.Colors.surface)
            .scaleEffect(isPressed ? 0.98 : 1.0)
            .animation(.easeInOut(duration: 0.1), value: isPressed)
        }
        .buttonStyle(PlainButtonStyle())
        .onLongPressGesture(minimumDuration: 0.0, maximumDistance: .infinity) {
            // Long press action
        } onPressingChanged: { pressing in
            isPressed = pressing
        }
    }
    
    private var highlightedSubject: AttributedString {
        highlightText(email.subject, query: query)
    }
    
    private var highlightedBody: AttributedString {
        highlightText(email.body, query: query)
    }
    
    private func highlightText(_ text: String, query: String) -> AttributedString {
        guard !query.isEmpty else {
            return AttributedString(text)
        }
        
        var attributedString = AttributedString(text)
        
        let searchTerms = query.components(separatedBy: CharacterSet.whitespacesAndNewlines)
            .filter { !$0.isEmpty }
        
        for term in searchTerms {
            if let range = attributedString.range(of: term, options: [.caseInsensitive]) {
                attributedString[range].backgroundColor = DesignSystem.Colors.accent.opacity(0.2)
                attributedString[range].font = .system(size: 13, weight: .semibold, design: .rounded)
            }
        }
        
        return attributedString
    }
}

// MARK: - Preview

struct SearchResultsView_Previews: PreviewProvider {
    static var previews: some View {
        SearchResultsView(viewModel: ContentViewModel(), searchQuery: "meeting")
    }
}